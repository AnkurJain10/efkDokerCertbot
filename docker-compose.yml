version: "2"

services:
  nginx:
    restart: always
    image: nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/etc/nginx/conf.d"
      - "/etc/nginx/vhost.d"
      - "/usr/share/nginx/html"
      - "./volumes/proxy/certs:/etc/nginx/certs:ro"
    networks:
      - esnet


  nginx-gen:
    restart: always
    image: jwilder/docker-gen
    container_name: nginx-gen
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "./volumes/proxy/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro"
    volumes_from:
      - nginx
    entrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf



  letsencrypt-nginx-proxy-companion:
    restart: always
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt-nginx-proxy-companion
    volumes_from:
      - nginx
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./volumes/proxy/certs:/etc/nginx/certs:rw"
    environment:
      - NGINX_DOCKER_GEN_CONTAINER=nginx-gen


  
  elasticsearch:
    build: elasticsearch/
    container_name: elasticsearch
    environment:
      - cluster.name=es-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 127.0.0.1:9200:9200
    networks:
      - esnet

  # Elasticsearch slave node
  elasticsearch_node1:
    build: elasticsearch/
    container_name: elasticsearch_node1
    environment:
      - cluster.name=es-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.zen.ping.unicast.hosts=elasticsearch"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    links:
      - elasticsearch
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    networks:
      - esnet

  # Bring up fluentd Listeneer
  fluentd:
    container_name: fluentd
    build: ./fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    depends_on:
      - elasticsearch
    ports:
      - 127.0.0.1:24224:24224
      - "24224:24224/udp"
    networks:
      - esnet
  
  # Bring up Kibana container
  kibana:
    build: kibana/
    container_name: kibana
    # ports:
    #   - 5601
    volumes:
      - ./kibana/config/:/usr/share/kibana/config
    links:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - VIRTUAL_HOST=l.labshare.org
      - VIRTUAL_NETWORK=nginx-proxy
      - VIRTUAL_PORT=5601
      - LETSENCRYPT_HOST=l.labshare.org
      - LETSENCRYPT_EMAIL=jainam@nih.gov

    networks:
      - esnet

# Shared volumes between elastic search
volumes:
  esdata1:
    driver: local
  esdata2:
    driver: local

# Use comman network interface esnet between all containers
networks:
  esnet:
    driver: bridge






  # sample-api:
  #   restart: always
  #   image: sample-api
  #   build: ./samples/api
  #   container_name: sample-api
  #   environment:
  #     - VIRTUAL_HOST=sampleapi.example.com
  #     - VIRTUAL_NETWORK=nginx-proxy
  #     - VIRTUAL_PORT=3000
  #     - LETSENCRYPT_HOST=sampleapi.example.com
  #     - LETSENCRYPT_EMAIL=email@example.com

  # sample-website:
  #   restart: always
  #   image: sample-website
  #   build: ./samples/website
  #   container_name: sample-website
  #   volumes:
  #     - "./volumes/nginx-sample-website/conf.d/:/etc/nginx/conf.d"
  #     - "./volumes/config/sample-website/config.js:/usr/share/nginx/html/config.js"
  #   environment:
  #     - VIRTUAL_HOST=samplewebsite.example.com
  #     - VIRTUAL_NETWORK=nginx-proxy
  #     - VIRTUAL_PORT=80
  #     - LETSENCRYPT_HOST=sample.example.com
  #     - LETSENCRYPT_EMAIL=email@example.com





